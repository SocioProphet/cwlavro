package cwl;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** Specify basic hardware resource requirements.

"min" is the minimum amount of a resource that must be reserved to schedule
a job. If "min" cannot be satisfied, the job should not be run.

"max" is the maximum amount of a resource that the job shall be permitted
to use. If a node has sufficient resources, multiple jobs may be scheduled
on a single node provided each job's "max" resource requirements are
met. If a job attempts to exceed its "max" resource allocation, an
implementation may deny additional resources, which may result in job
failure.

If "min" is specified but "max" is not, then "max" == "min"
If "max" is specified by "min" is not, then "min" == "max".

It is an error if max < min.

It is an error if the value of any of these fields is negative.

If neither "min" nor "max" is specified for a resource, an implementation may provide a default.
 */
@org.apache.avro.specific.AvroGenerated
public class ResourceRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResourceRequirement\",\"doc\":\"Specify basic hardware resource requirements.\\n\\n\\\"min\\\" is the minimum amount of a resource that must be reserved to schedule\\na job. If \\\"min\\\" cannot be satisfied, the job should not be run.\\n\\n\\\"max\\\" is the maximum amount of a resource that the job shall be permitted\\nto use. If a node has sufficient resources, multiple jobs may be scheduled\\non a single node provided each job's \\\"max\\\" resource requirements are\\nmet. If a job attempts to exceed its \\\"max\\\" resource allocation, an\\nimplementation may deny additional resources, which may result in job\\nfailure.\\n\\nIf \\\"min\\\" is specified but \\\"max\\\" is not, then \\\"max\\\" == \\\"min\\\"\\nIf \\\"max\\\" is specified by \\\"min\\\" is not, then \\\"min\\\" == \\\"max\\\".\\n\\nIt is an error if max < min.\\n\\nIt is an error if the value of any of these fields is negative.\\n\\nIf neither \\\"min\\\" nor \\\"max\\\" is specified for a resource, an implementation may provide a default.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"coresMin\",\"type\":[\"null\",\"long\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"Not a real type.  Indicates that a field must allow expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"],\"docAfter\":\"https://w3id.org/cwl/cwl#ExpressionTool\"}],\"doc\":\"Minimum reserved number of CPU cores\"},{\"name\":\"coresMax\",\"type\":[\"null\",\"int\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved number of CPU cores\"},{\"name\":\"ramMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved RAM in mebibytes (2**20)\"},{\"name\":\"ramMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved RAM in mebibytes (2**20)\"},{\"name\":\"tmpdirMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)\"},{\"name\":\"tmpdirMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)\"},{\"name\":\"outdirMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)\"},{\"name\":\"outdirMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The specific requirement type. */
  @Deprecated public CharSequence class$;
  /** Minimum reserved number of CPU cores */
  @Deprecated public Object coresMin;
  /** Maximum reserved number of CPU cores */
  @Deprecated public Object coresMax;
  /** Minimum reserved RAM in mebibytes (2**20) */
  @Deprecated public Object ramMin;
  /** Maximum reserved RAM in mebibytes (2**20) */
  @Deprecated public Object ramMax;
  /** Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20) */
  @Deprecated public Object tmpdirMin;
  /** Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20) */
  @Deprecated public Object tmpdirMax;
  /** Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20) */
  @Deprecated public Object outdirMin;
  /** Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20) */
  @Deprecated public Object outdirMax;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ResourceRequirement() {}

  /**
   * All-args constructor.
   */
  public ResourceRequirement(CharSequence class$, Object coresMin, Object coresMax, Object ramMin, Object ramMax, Object tmpdirMin, Object tmpdirMax, Object outdirMin, Object outdirMax) {
    this.class$ = class$;
    this.coresMin = coresMin;
    this.coresMax = coresMax;
    this.ramMin = ramMin;
    this.ramMax = ramMax;
    this.tmpdirMin = tmpdirMin;
    this.tmpdirMax = tmpdirMax;
    this.outdirMin = outdirMin;
    this.outdirMax = outdirMax;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return class$;
    case 1: return coresMin;
    case 2: return coresMax;
    case 3: return ramMin;
    case 4: return ramMax;
    case 5: return tmpdirMin;
    case 6: return tmpdirMax;
    case 7: return outdirMin;
    case 8: return outdirMax;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: class$ = (CharSequence)value$; break;
    case 1: coresMin = (Object)value$; break;
    case 2: coresMax = (Object)value$; break;
    case 3: ramMin = (Object)value$; break;
    case 4: ramMax = (Object)value$; break;
    case 5: tmpdirMin = (Object)value$; break;
    case 6: tmpdirMax = (Object)value$; break;
    case 7: outdirMin = (Object)value$; break;
    case 8: outdirMax = (Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'class$' field.
   * The specific requirement type.   */
  public CharSequence getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * The specific requirement type.   * @param value the value to set.
   */
  public void setClass$(CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'coresMin' field.
   * Minimum reserved number of CPU cores   */
  public Object getCoresMin() {
    return coresMin;
  }

  /**
   * Sets the value of the 'coresMin' field.
   * Minimum reserved number of CPU cores   * @param value the value to set.
   */
  public void setCoresMin(Object value) {
    this.coresMin = value;
  }

  /**
   * Gets the value of the 'coresMax' field.
   * Maximum reserved number of CPU cores   */
  public Object getCoresMax() {
    return coresMax;
  }

  /**
   * Sets the value of the 'coresMax' field.
   * Maximum reserved number of CPU cores   * @param value the value to set.
   */
  public void setCoresMax(Object value) {
    this.coresMax = value;
  }

  /**
   * Gets the value of the 'ramMin' field.
   * Minimum reserved RAM in mebibytes (2**20)   */
  public Object getRamMin() {
    return ramMin;
  }

  /**
   * Sets the value of the 'ramMin' field.
   * Minimum reserved RAM in mebibytes (2**20)   * @param value the value to set.
   */
  public void setRamMin(Object value) {
    this.ramMin = value;
  }

  /**
   * Gets the value of the 'ramMax' field.
   * Maximum reserved RAM in mebibytes (2**20)   */
  public Object getRamMax() {
    return ramMax;
  }

  /**
   * Sets the value of the 'ramMax' field.
   * Maximum reserved RAM in mebibytes (2**20)   * @param value the value to set.
   */
  public void setRamMax(Object value) {
    this.ramMax = value;
  }

  /**
   * Gets the value of the 'tmpdirMin' field.
   * Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)   */
  public Object getTmpdirMin() {
    return tmpdirMin;
  }

  /**
   * Sets the value of the 'tmpdirMin' field.
   * Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)   * @param value the value to set.
   */
  public void setTmpdirMin(Object value) {
    this.tmpdirMin = value;
  }

  /**
   * Gets the value of the 'tmpdirMax' field.
   * Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)   */
  public Object getTmpdirMax() {
    return tmpdirMax;
  }

  /**
   * Sets the value of the 'tmpdirMax' field.
   * Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)   * @param value the value to set.
   */
  public void setTmpdirMax(Object value) {
    this.tmpdirMax = value;
  }

  /**
   * Gets the value of the 'outdirMin' field.
   * Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)   */
  public Object getOutdirMin() {
    return outdirMin;
  }

  /**
   * Sets the value of the 'outdirMin' field.
   * Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)   * @param value the value to set.
   */
  public void setOutdirMin(Object value) {
    this.outdirMin = value;
  }

  /**
   * Gets the value of the 'outdirMax' field.
   * Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)   */
  public Object getOutdirMax() {
    return outdirMax;
  }

  /**
   * Sets the value of the 'outdirMax' field.
   * Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)   * @param value the value to set.
   */
  public void setOutdirMax(Object value) {
    this.outdirMax = value;
  }

  /** Creates a new ResourceRequirement RecordBuilder */
  public static ResourceRequirement.Builder newBuilder() {
    return new ResourceRequirement.Builder();
  }

  /** Creates a new ResourceRequirement RecordBuilder by copying an existing Builder */
  public static ResourceRequirement.Builder newBuilder(ResourceRequirement.Builder other) {
    return new ResourceRequirement.Builder(other);
  }

  /** Creates a new ResourceRequirement RecordBuilder by copying an existing ResourceRequirement instance */
  public static ResourceRequirement.Builder newBuilder(ResourceRequirement other) {
    return new ResourceRequirement.Builder(other);
  }

  /**
   * RecordBuilder for ResourceRequirement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResourceRequirement>
    implements org.apache.avro.data.RecordBuilder<ResourceRequirement> {

    private CharSequence class$;
    private Object coresMin;
    private Object coresMax;
    private Object ramMin;
    private Object ramMax;
    private Object tmpdirMin;
    private Object tmpdirMax;
    private Object outdirMin;
    private Object outdirMax;

    /** Creates a new Builder */
    private Builder() {
      super(ResourceRequirement.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(ResourceRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coresMin)) {
        this.coresMin = data().deepCopy(fields()[1].schema(), other.coresMin);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coresMax)) {
        this.coresMax = data().deepCopy(fields()[2].schema(), other.coresMax);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ramMin)) {
        this.ramMin = data().deepCopy(fields()[3].schema(), other.ramMin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ramMax)) {
        this.ramMax = data().deepCopy(fields()[4].schema(), other.ramMax);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tmpdirMin)) {
        this.tmpdirMin = data().deepCopy(fields()[5].schema(), other.tmpdirMin);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tmpdirMax)) {
        this.tmpdirMax = data().deepCopy(fields()[6].schema(), other.tmpdirMax);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.outdirMin)) {
        this.outdirMin = data().deepCopy(fields()[7].schema(), other.outdirMin);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.outdirMax)) {
        this.outdirMax = data().deepCopy(fields()[8].schema(), other.outdirMax);
        fieldSetFlags()[8] = true;
      }
    }

    /** Creates a Builder by copying an existing ResourceRequirement instance */
    private Builder(ResourceRequirement other) {
            super(ResourceRequirement.SCHEMA$);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coresMin)) {
        this.coresMin = data().deepCopy(fields()[1].schema(), other.coresMin);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coresMax)) {
        this.coresMax = data().deepCopy(fields()[2].schema(), other.coresMax);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ramMin)) {
        this.ramMin = data().deepCopy(fields()[3].schema(), other.ramMin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ramMax)) {
        this.ramMax = data().deepCopy(fields()[4].schema(), other.ramMax);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tmpdirMin)) {
        this.tmpdirMin = data().deepCopy(fields()[5].schema(), other.tmpdirMin);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tmpdirMax)) {
        this.tmpdirMax = data().deepCopy(fields()[6].schema(), other.tmpdirMax);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.outdirMin)) {
        this.outdirMin = data().deepCopy(fields()[7].schema(), other.outdirMin);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.outdirMax)) {
        this.outdirMax = data().deepCopy(fields()[8].schema(), other.outdirMax);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'class$' field */
    public CharSequence getClass$() {
      return class$;
    }

    /** Sets the value of the 'class$' field */
    public ResourceRequirement.Builder setClass$(CharSequence value) {
      validate(fields()[0], value);
      this.class$ = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'class$' field has been set */
    public boolean hasClass$() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'class$' field */
    public ResourceRequirement.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'coresMin' field */
    public Object getCoresMin() {
      return coresMin;
    }

    /** Sets the value of the 'coresMin' field */
    public ResourceRequirement.Builder setCoresMin(Object value) {
      validate(fields()[1], value);
      this.coresMin = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'coresMin' field has been set */
    public boolean hasCoresMin() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'coresMin' field */
    public ResourceRequirement.Builder clearCoresMin() {
      coresMin = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'coresMax' field */
    public Object getCoresMax() {
      return coresMax;
    }

    /** Sets the value of the 'coresMax' field */
    public ResourceRequirement.Builder setCoresMax(Object value) {
      validate(fields()[2], value);
      this.coresMax = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'coresMax' field has been set */
    public boolean hasCoresMax() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'coresMax' field */
    public ResourceRequirement.Builder clearCoresMax() {
      coresMax = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'ramMin' field */
    public Object getRamMin() {
      return ramMin;
    }

    /** Sets the value of the 'ramMin' field */
    public ResourceRequirement.Builder setRamMin(Object value) {
      validate(fields()[3], value);
      this.ramMin = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'ramMin' field has been set */
    public boolean hasRamMin() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'ramMin' field */
    public ResourceRequirement.Builder clearRamMin() {
      ramMin = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'ramMax' field */
    public Object getRamMax() {
      return ramMax;
    }

    /** Sets the value of the 'ramMax' field */
    public ResourceRequirement.Builder setRamMax(Object value) {
      validate(fields()[4], value);
      this.ramMax = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /** Checks whether the 'ramMax' field has been set */
    public boolean hasRamMax() {
      return fieldSetFlags()[4];
    }

    /** Clears the value of the 'ramMax' field */
    public ResourceRequirement.Builder clearRamMax() {
      ramMax = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'tmpdirMin' field */
    public Object getTmpdirMin() {
      return tmpdirMin;
    }

    /** Sets the value of the 'tmpdirMin' field */
    public ResourceRequirement.Builder setTmpdirMin(Object value) {
      validate(fields()[5], value);
      this.tmpdirMin = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /** Checks whether the 'tmpdirMin' field has been set */
    public boolean hasTmpdirMin() {
      return fieldSetFlags()[5];
    }

    /** Clears the value of the 'tmpdirMin' field */
    public ResourceRequirement.Builder clearTmpdirMin() {
      tmpdirMin = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'tmpdirMax' field */
    public Object getTmpdirMax() {
      return tmpdirMax;
    }

    /** Sets the value of the 'tmpdirMax' field */
    public ResourceRequirement.Builder setTmpdirMax(Object value) {
      validate(fields()[6], value);
      this.tmpdirMax = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /** Checks whether the 'tmpdirMax' field has been set */
    public boolean hasTmpdirMax() {
      return fieldSetFlags()[6];
    }

    /** Clears the value of the 'tmpdirMax' field */
    public ResourceRequirement.Builder clearTmpdirMax() {
      tmpdirMax = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'outdirMin' field */
    public Object getOutdirMin() {
      return outdirMin;
    }

    /** Sets the value of the 'outdirMin' field */
    public ResourceRequirement.Builder setOutdirMin(Object value) {
      validate(fields()[7], value);
      this.outdirMin = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /** Checks whether the 'outdirMin' field has been set */
    public boolean hasOutdirMin() {
      return fieldSetFlags()[7];
    }

    /** Clears the value of the 'outdirMin' field */
    public ResourceRequirement.Builder clearOutdirMin() {
      outdirMin = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'outdirMax' field */
    public Object getOutdirMax() {
      return outdirMax;
    }

    /** Sets the value of the 'outdirMax' field */
    public ResourceRequirement.Builder setOutdirMax(Object value) {
      validate(fields()[8], value);
      this.outdirMax = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /** Checks whether the 'outdirMax' field has been set */
    public boolean hasOutdirMax() {
      return fieldSetFlags()[8];
    }

    /** Clears the value of the 'outdirMax' field */
    public ResourceRequirement.Builder clearOutdirMax() {
      outdirMax = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public ResourceRequirement build() {
      try {
        ResourceRequirement record = new ResourceRequirement();
        record.class$ = fieldSetFlags()[0] ? this.class$ : (CharSequence) defaultValue(fields()[0]);
        record.coresMin = fieldSetFlags()[1] ? this.coresMin : (Object) defaultValue(fields()[1]);
        record.coresMax = fieldSetFlags()[2] ? this.coresMax : (Object) defaultValue(fields()[2]);
        record.ramMin = fieldSetFlags()[3] ? this.ramMin : (Object) defaultValue(fields()[3]);
        record.ramMax = fieldSetFlags()[4] ? this.ramMax : (Object) defaultValue(fields()[4]);
        record.tmpdirMin = fieldSetFlags()[5] ? this.tmpdirMin : (Object) defaultValue(fields()[5]);
        record.tmpdirMax = fieldSetFlags()[6] ? this.tmpdirMax : (Object) defaultValue(fields()[6]);
        record.outdirMin = fieldSetFlags()[7] ? this.outdirMin : (Object) defaultValue(fields()[7]);
        record.outdirMax = fieldSetFlags()[8] ? this.outdirMax : (Object) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
