package io.cwl.avro;
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** Define a file or subdirectory that must be placed in the designated output
directory prior to executing the command line tool.  May be the result of
executing an expression, such as building a configuration file from a
template.
 */
@org.apache.avro.specific.AvroGenerated
public class Dirent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dirent\",\"doc\":\"Define a file or subdirectory that must be placed in the designated output\\ndirectory prior to executing the command line tool.  May be the result of\\nexecuting an expression, such as building a configuration file from a\\ntemplate.\\n\",\"fields\":[{\"name\":\"entryname\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]}],\"doc\":\"The name of the file or subdirectory to create in the output directory.\\nIf `entry` is a File or Directory, this overrides `basename`.  Optional.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#entryname\"}},{\"name\":\"entry\",\"type\":[\"string\",\"Expression\"],\"doc\":\"If the value is a string literal or an expression which evaluates to a\\nstring, a new file must be created with the string as the file contents.\\n\\nIf the value is an expression that evaluates to a `File` object, this\\nindicates the referenced file should be added to the designated output\\ndirectory prior to executing the tool.\\n\\nIf the value is an expression that evaluates to a `Dirent` object, this\\nindicates that the File or Directory in `entry` should be added to the\\ndesignated output directory with the name in `entryname`.\\n\\nIf `writable` is false, the file may be made available using a bind\\nmount or file system link to avoid unnecessary copying of the input\\nfile.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#entry\"}},{\"name\":\"writable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true, the file or directory must be writable by the tool.  Changes\\nto the file or directory must be isolated and not visible by any other\\nCommandLineTool process.  This may be implemented by making a copy of\\nthe original file or directory.  Default false (files and directories\\nread-only by default).\\n\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the file or subdirectory to create in the output directory.
If `entry` is a File or Directory, this overrides `basename`.  Optional.
 */
  @Deprecated public java.lang.Object entryname;
  /** If the value is a string literal or an expression which evaluates to a
string, a new file must be created with the string as the file contents.

If the value is an expression that evaluates to a `File` object, this
indicates the referenced file should be added to the designated output
directory prior to executing the tool.

If the value is an expression that evaluates to a `Dirent` object, this
indicates that the File or Directory in `entry` should be added to the
designated output directory with the name in `entryname`.

If `writable` is false, the file may be made available using a bind
mount or file system link to avoid unnecessary copying of the input
file.
 */
  @Deprecated public java.lang.Object entry;
  /** If true, the file or directory must be writable by the tool.  Changes
to the file or directory must be isolated and not visible by any other
CommandLineTool process.  This may be implemented by making a copy of
the original file or directory.  Default false (files and directories
read-only by default).
 */
  @Deprecated public java.lang.Boolean writable;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Dirent() {}

  /**
   * All-args constructor.
   */
  public Dirent(java.lang.Object entryname, java.lang.Object entry, java.lang.Boolean writable) {
    this.entryname = entryname;
    this.entry = entry;
    this.writable = writable;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return entryname;
    case 1: return entry;
    case 2: return writable;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: entryname = (java.lang.Object)value$; break;
    case 1: entry = (java.lang.Object)value$; break;
    case 2: writable = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'entryname' field.
   * The name of the file or subdirectory to create in the output directory.
If `entry` is a File or Directory, this overrides `basename`.  Optional.
   */
  public java.lang.Object getEntryname() {
    return entryname;
  }

  /**
   * Sets the value of the 'entryname' field.
   * The name of the file or subdirectory to create in the output directory.
If `entry` is a File or Directory, this overrides `basename`.  Optional.
   * @param value the value to set.
   */
  public void setEntryname(java.lang.Object value) {
    this.entryname = value;
  }

  /**
   * Gets the value of the 'entry' field.
   * If the value is a string literal or an expression which evaluates to a
string, a new file must be created with the string as the file contents.

If the value is an expression that evaluates to a `File` object, this
indicates the referenced file should be added to the designated output
directory prior to executing the tool.

If the value is an expression that evaluates to a `Dirent` object, this
indicates that the File or Directory in `entry` should be added to the
designated output directory with the name in `entryname`.

If `writable` is false, the file may be made available using a bind
mount or file system link to avoid unnecessary copying of the input
file.
   */
  public java.lang.Object getEntry() {
    return entry;
  }

  /**
   * Sets the value of the 'entry' field.
   * If the value is a string literal or an expression which evaluates to a
string, a new file must be created with the string as the file contents.

If the value is an expression that evaluates to a `File` object, this
indicates the referenced file should be added to the designated output
directory prior to executing the tool.

If the value is an expression that evaluates to a `Dirent` object, this
indicates that the File or Directory in `entry` should be added to the
designated output directory with the name in `entryname`.

If `writable` is false, the file may be made available using a bind
mount or file system link to avoid unnecessary copying of the input
file.
   * @param value the value to set.
   */
  public void setEntry(java.lang.Object value) {
    this.entry = value;
  }

  /**
   * Gets the value of the 'writable' field.
   * If true, the file or directory must be writable by the tool.  Changes
to the file or directory must be isolated and not visible by any other
CommandLineTool process.  This may be implemented by making a copy of
the original file or directory.  Default false (files and directories
read-only by default).
   */
  public java.lang.Boolean getWritable() {
    return writable;
  }

  /**
   * Sets the value of the 'writable' field.
   * If true, the file or directory must be writable by the tool.  Changes
to the file or directory must be isolated and not visible by any other
CommandLineTool process.  This may be implemented by making a copy of
the original file or directory.  Default false (files and directories
read-only by default).
   * @param value the value to set.
   */
  public void setWritable(java.lang.Boolean value) {
    this.writable = value;
  }

  /** Creates a new Dirent RecordBuilder */
  public static Dirent.Builder newBuilder() {
    return new Dirent.Builder();
  }
  
  /** Creates a new Dirent RecordBuilder by copying an existing Builder */
  public static Dirent.Builder newBuilder(Dirent.Builder other) {
    return new Dirent.Builder(other);
  }
  
  /** Creates a new Dirent RecordBuilder by copying an existing Dirent instance */
  public static Dirent.Builder newBuilder(Dirent other) {
    return new Dirent.Builder(other);
  }
  
  /**
   * RecordBuilder for Dirent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Dirent>
    implements org.apache.avro.data.RecordBuilder<Dirent> {

    private java.lang.Object entryname;
    private java.lang.Object entry;
    private java.lang.Boolean writable;

    /** Creates a new Builder */
    private Builder() {
      super(Dirent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Dirent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.entryname)) {
        this.entryname = data().deepCopy(fields()[0].schema(), other.entryname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entry)) {
        this.entry = data().deepCopy(fields()[1].schema(), other.entry);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.writable)) {
        this.writable = data().deepCopy(fields()[2].schema(), other.writable);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Dirent instance */
    private Builder(Dirent other) {
            super(Dirent.SCHEMA$);
      if (isValidValue(fields()[0], other.entryname)) {
        this.entryname = data().deepCopy(fields()[0].schema(), other.entryname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entry)) {
        this.entry = data().deepCopy(fields()[1].schema(), other.entry);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.writable)) {
        this.writable = data().deepCopy(fields()[2].schema(), other.writable);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'entryname' field */
    public java.lang.Object getEntryname() {
      return entryname;
    }
    
    /** Sets the value of the 'entryname' field */
    public Dirent.Builder setEntryname(java.lang.Object value) {
      validate(fields()[0], value);
      this.entryname = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'entryname' field has been set */
    public boolean hasEntryname() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'entryname' field */
    public Dirent.Builder clearEntryname() {
      entryname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'entry' field */
    public java.lang.Object getEntry() {
      return entry;
    }
    
    /** Sets the value of the 'entry' field */
    public Dirent.Builder setEntry(java.lang.Object value) {
      validate(fields()[1], value);
      this.entry = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'entry' field has been set */
    public boolean hasEntry() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'entry' field */
    public Dirent.Builder clearEntry() {
      entry = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'writable' field */
    public java.lang.Boolean getWritable() {
      return writable;
    }
    
    /** Sets the value of the 'writable' field */
    public Dirent.Builder setWritable(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.writable = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'writable' field has been set */
    public boolean hasWritable() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'writable' field */
    public Dirent.Builder clearWritable() {
      writable = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Dirent build() {
      try {
        Dirent record = new Dirent();
        record.entryname = fieldSetFlags()[0] ? this.entryname : (java.lang.Object) defaultValue(fields()[0]);
        record.entry = fieldSetFlags()[1] ? this.entry : (java.lang.Object) defaultValue(fields()[1]);
        record.writable = fieldSetFlags()[2] ? this.writable : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
