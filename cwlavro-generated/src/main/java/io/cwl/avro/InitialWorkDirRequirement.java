package io.cwl.avro;
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Define a list of files and subdirectories that must be created by the workflow platform in the designated output directory prior to executing the command line tool. */
@org.apache.avro.specific.AvroGenerated
public class InitialWorkDirRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1291420833674135236L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InitialWorkDirRequirement\",\"doc\":\"Define a list of files and subdirectories that must be created by the workflow platform in the designated output directory prior to executing the command line tool.\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"InitialWorkDirRequirement\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"}},{\"name\":\"listing\",\"type\":[{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"File\",\"doc\":\"Represents a file (or group of files if `secondaryFiles` is specified) that\\nmust be accessible by tools using standard POSIX file system call API such as\\nopen(2) and read(2).\\n\",\"fields\":[{\"name\":\"class\",\"type\":{\"type\":\"enum\",\"name\":\"File_class\",\"symbols\":[\"File\"]},\"doc\":\"Must be `File` to indicate this object describes a file.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"}},{\"name\":\"location\",\"type\":[\"null\",\"string\"],\"doc\":\"An IRI that identifies the file resource.  This may be a relative\\nreference, in which case it must be resolved using the base IRI of the\\ndocument.  The location may refer to a local or remote resource; the\\nimplementation must use the IRI to retrieve file content.  If an\\nimplementation is unable to retrieve the file content stored at a\\nremote resource (due to unsupported protocol, access denied, or other\\nissue) it must signal an error.\\n\\nIf the `location` field is not provided, the `contents` field must be\\nprovided.  The implementation must assign a unique identifier for\\nthe `location` field.\\n\\nIf the `path` field is provided but the `location` field is not, an\\nimplementation may assign the value of the `path` field to `location`,\\nthen follow the rules above.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"@id\"}},{\"name\":\"path\",\"type\":[\"null\",\"string\"],\"doc\":\"The local host path where the File is available when a CommandLineTool is\\nexecuted.  This field must be set by the implementation.  The final\\npath component must match the value of `basename`.  This field\\nmust not be used in any other context.  The command line tool being\\nexecuted must be able to to access the file at `path` using the POSIX\\n`open(2)` syscall.\\n\\nAs a special case, if the `path` field is provided but the `location`\\nfield is not, an implementation may assign the value of the `path`\\nfield to `location`, and remove the `path` field.\\n\\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\\\`, `\\\"`, `'`,\\n`<space>`, `<tab>`, and `<newline>`) or characters\\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\\nthen implementations may terminate the process with a\\n`permanentFailure`.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/cwl#path\"}},{\"name\":\"basename\",\"type\":[\"null\",\"string\"],\"doc\":\"The base name of the file, that is, the name of the file without any\\nleading directory path.  The base name must not contain a slash `/`.\\n\\nIf not provided, the implementation must set this field based on the\\n`location` field by taking the final path component after parsing\\n`location` as an IRI.  If `basename` is provided, it is not required to\\nmatch the value from `location`.\\n\\nWhen this file is made available to a CommandLineTool, it must be named\\nwith `basename`, i.e. the final component of the `path` field must match\\n`basename`.\\n\",\"jsonldPredicate\":\"cwl:basename\"},{\"name\":\"dirname\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the directory containing file, that is, the path leading up\\nto the final slash in the path such that `dirname + '/' + basename ==\\npath`.\\n\\nThe implementation must set this field based on the value of `path`\\nprior to evaluating parameter references or expressions in a\\nCommandLineTool document.  This field must not be used in any other\\ncontext.\\n\"},{\"name\":\"nameroot\",\"type\":[\"null\",\"string\"],\"doc\":\"The basename root such that `nameroot + nameext == basename`, and\\n`nameext` is empty or begins with a period and contains at most one\\nperiod.  For the purposess of path splitting leading periods on the\\nbasename are ignored; a basename of `.cshrc` will have a nameroot of\\n`.cshrc`.\\n\\nThe implementation must set this field automatically based on the value\\nof `basename` prior to evaluating parameter references or expressions.\\n\"},{\"name\":\"nameext\",\"type\":[\"null\",\"string\"],\"doc\":\"The basename extension such that `nameroot + nameext == basename`, and\\n`nameext` is empty or begins with a period and contains at most one\\nperiod.  Leading periods on the basename are ignored; a basename of\\n`.cshrc` will have an empty `nameext`.\\n\\nThe implementation must set this field automatically based on the value\\nof `basename` prior to evaluating parameter references or expressions.\\n\"},{\"name\":\"checksum\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional hash code for validating file integrity.  Currently must be in the form\\n\\\"sha1$ + hexadecimal string\\\" using the SHA-1 algorithm.\\n\"},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"Optional file size\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"File\",{\"type\":\"record\",\"name\":\"Directory\",\"doc\":\"Represents a directory to present to a command line tool.\\n\",\"fields\":[{\"name\":\"class\",\"type\":{\"type\":\"enum\",\"name\":\"Directory_class\",\"symbols\":[\"Directory\"]},\"doc\":\"Must be `Directory` to indicate this object describes a Directory.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"}},{\"name\":\"location\",\"type\":[\"null\",\"string\"],\"doc\":\"An IRI that identifies the directory resource.  This may be a relative\\nreference, in which case it must be resolved using the base IRI of the\\ndocument.  The location may refer to a local or remote resource.  If\\nthe `listing` field is not set, the implementation must use the\\nlocation IRI to retrieve directory listing.  If an implementation is\\nunable to retrieve the directory listing stored at a remote resource (due to\\nunsupported protocol, access denied, or other issue) it must signal an\\nerror.\\n\\nIf the `location` field is not provided, the `listing` field must be\\nprovided.  The implementation must assign a unique identifier for\\nthe `location` field.\\n\\nIf the `path` field is provided but the `location` field is not, an\\nimplementation may assign the value of the `path` field to `location`,\\nthen follow the rules above.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"@id\"}},{\"name\":\"path\",\"type\":[\"null\",\"string\"],\"doc\":\"The local path where the Directory is made available prior to executing a\\nCommandLineTool.  This must be set by the implementation.  This field\\nmust not be used in any other context.  The command line tool being\\nexecuted must be able to to access the directory at `path` using the POSIX\\n`opendir(2)` syscall.\\n\\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\\\`, `\\\"`, `'`,\\n`<space>`, `<tab>`, and `<newline>`) or characters\\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\\nthen implementations may terminate the process with a\\n`permanentFailure`.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/cwl#path\"}},{\"name\":\"basename\",\"type\":[\"null\",\"string\"],\"doc\":\"The base name of the directory, that is, the name of the file without any\\nleading directory path.  The base name must not contain a slash `/`.\\n\\nIf not provided, the implementation must set this field based on the\\n`location` field by taking the final path component after parsing\\n`location` as an IRI.  If `basename` is provided, it is not required to\\nmatch the value from `location`.\\n\\nWhen this file is made available to a CommandLineTool, it must be named\\nwith `basename`, i.e. the final component of the `path` field must match\\n`basename`.\\n\",\"jsonldPredicate\":\"cwl:basename\"},{\"name\":\"listing\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"File\",\"Directory\"]}],\"doc\":\"List of files or ","subdirectories contained in this directory.  The name\\nof each file or subdirectory is determined by the `basename` field of\\neach `File` or `Directory` object.  It is an error if a `File` shares a\\n`basename` with any other entry in `listing`.  If two or more\\n`Directory` object share the same `basename`, this must be treated as\\nequivalent to a single subdirectory with the listings recursively\\nmerged.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#listing\"}}],\"docAfter\":\"https://w3id.org/cwl/cwl#File\"}]}],\"doc\":\"A list of additional files that are associated with the primary file\\nand must be transferred alongside the primary file.  Examples include\\nindexes of the primary file, or external references which must be\\nincluded when loading primary document.  A file object listed in\\n`secondaryFiles` may itself include `secondaryFiles` for which the same\\nrules apply.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\"},{\"name\":\"format\",\"type\":[\"null\",\"string\"],\"doc\":\"The format of the file: this must be an IRI of a concept node that\\nrepresents the file format, preferrably defined within an ontology.\\nIf no ontology is available, file formats may be tested by exact match.\\n\\nReasoning about format compatability must be done by checking that an\\ninput file format is the same, `owl:equivalentClass` or\\n`rdfs:subClassOf` the format required by the input parameter.\\n`owl:equivalentClass` is transitive with `rdfs:subClassOf`, e.g. if\\n`B owl:equivalentClass C` and `B owl:subclassOf A` then infer\\n`C owl:subclassOf A`.\\n\\nFile format ontologies may be provided in the \\\"$schema\\\" metadata at the\\nroot of the document.  If no ontologies are specified in `$schema`, the\\nruntime may perform exact file format matches.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/cwl#format\",\"identity\":true}},{\"name\":\"contents\",\"type\":[\"null\",\"string\"],\"doc\":\"File contents literal.  Maximum of 64 KiB.\\n\\nIf neither `location` nor `path` is provided, `contents` must be\\nnon-null.  The implementation must assign a unique identifier for the\\n`location` field.  When the file is staged as input to CommandLineTool,\\nthe value of `contents` must be written to a file.\\n\\nIf `loadContents` of `inputBinding` or `outputBinding` is true and\\n`location` is valid, the implementation must read up to the first 64\\nKiB of text from the file and place it in the \\\"contents\\\" field.\\n\"}],\"docParent\":\"https://w3id.org/cwl/cwl#CWLType\"},\"Directory\",{\"type\":\"record\",\"name\":\"Dirent\",\"doc\":\"Define a file or subdirectory that must be placed in the designated output\\ndirectory prior to executing the command line tool.  May be the result of\\nexecuting an expression, such as building a configuration file from a\\ntemplate.\\n\",\"fields\":[{\"name\":\"entryname\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]}],\"doc\":\"The name of the file or subdirectory to create in the output directory.\\nIf `entry` is a File or Directory, this overrides `basename`.  Optional.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#entryname\"}},{\"name\":\"entry\",\"type\":[\"string\",\"Expression\"],\"doc\":\"If the value is a string literal or an expression which evaluates to a\\nstring, a new file must be created with the string as the file contents.\\n\\nIf the value is an expression that evaluates to a `File` object, this\\nindicates the referenced file should be added to the designated output\\ndirectory prior to executing the tool.\\n\\nIf the value is an expression that evaluates to a `Dirent` object, this\\nindicates that the File or Directory in `entry` should be added to the\\ndesignated output directory with the name in `entryname`.\\n\\nIf `writable` is false, the file may be made available using a bind\\nmount or file system link to avoid unnecessary copying of the input\\nfile.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#entry\"}},{\"name\":\"writable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true, the file or directory must be writable by the tool.  Changes\\nto the file or directory must be isolated and not visible by any other\\nCommandLineTool process.  This may be implemented by making a copy of\\nthe original file or directory.  Default false (files and directories\\nread-only by default).\\n\"}]},\"string\",\"Expression\"]},\"string\",\"Expression\"],\"doc\":\"The list of files or subdirectories that must be placed in the\\ndesignated output directory prior to executing the command line tool.\\n\\nMay be an expression.  If so, the expression return value must validate\\nas `{type: array, items: [File, Directory]}`.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#listing\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** InitialWorkDirRequirement */
  @Deprecated public java.lang.CharSequence class$;
  /** The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.
 */
  @Deprecated public java.lang.Object listing;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InitialWorkDirRequirement() {}

  /**
   * All-args constructor.
   * @param class$ InitialWorkDirRequirement
   * @param listing The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.

   */
  public InitialWorkDirRequirement(java.lang.CharSequence class$, java.lang.Object listing) {
    this.class$ = class$;
    this.listing = listing;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return class$;
    case 1: return listing;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: class$ = (java.lang.CharSequence)value$; break;
    case 1: listing = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'class$' field.
   * @return InitialWorkDirRequirement
   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * InitialWorkDirRequirement
   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'listing' field.
   * @return The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.

   */
  public java.lang.Object getListing() {
    return listing;
  }

  /**
   * Sets the value of the 'listing' field.
   * The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.

   * @param value the value to set.
   */
  public void setListing(java.lang.Object value) {
    this.listing = value;
  }

  /**
   * Creates a new InitialWorkDirRequirement RecordBuilder.
   * @return A new InitialWorkDirRequirement RecordBuilder
   */
  public static InitialWorkDirRequirement.Builder newBuilder() {
    return new InitialWorkDirRequirement.Builder();
  }

  /**
   * Creates a new InitialWorkDirRequirement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InitialWorkDirRequirement RecordBuilder
   */
  public static InitialWorkDirRequirement.Builder newBuilder(InitialWorkDirRequirement.Builder other) {
    return new InitialWorkDirRequirement.Builder(other);
  }

  /**
   * Creates a new InitialWorkDirRequirement RecordBuilder by copying an existing InitialWorkDirRequirement instance.
   * @param other The existing instance to copy.
   * @return A new InitialWorkDirRequirement RecordBuilder
   */
  public static InitialWorkDirRequirement.Builder newBuilder(InitialWorkDirRequirement other) {
    return new InitialWorkDirRequirement.Builder(other);
  }

  /**
   * RecordBuilder for InitialWorkDirRequirement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InitialWorkDirRequirement>
    implements org.apache.avro.data.RecordBuilder<InitialWorkDirRequirement> {

    /** InitialWorkDirRequirement */
    private java.lang.CharSequence class$;
    /** The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.
 */
    private java.lang.Object listing;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(InitialWorkDirRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.listing)) {
        this.listing = data().deepCopy(fields()[1].schema(), other.listing);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing InitialWorkDirRequirement instance
     * @param other The existing instance to copy.
     */
    private Builder(InitialWorkDirRequirement other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.listing)) {
        this.listing = data().deepCopy(fields()[1].schema(), other.listing);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'class$' field.
      * InitialWorkDirRequirement
      * @return The value.
      */
    public java.lang.CharSequence getClass$() {
      return class$;
    }

    /**
      * Sets the value of the 'class$' field.
      * InitialWorkDirRequirement
      * @param value The value of 'class$'.
      * @return This builder.
      */
    public InitialWorkDirRequirement.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.class$ = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'class$' field has been set.
      * InitialWorkDirRequirement
      * @return True if the 'class$' field has been set, false otherwise.
      */
    public boolean hasClass$() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'class$' field.
      * InitialWorkDirRequirement
      * @return This builder.
      */
    public InitialWorkDirRequirement.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'listing' field.
      * The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.

      * @return The value.
      */
    public java.lang.Object getListing() {
      return listing;
    }

    /**
      * Sets the value of the 'listing' field.
      * The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.

      * @param value The value of 'listing'.
      * @return This builder.
      */
    public InitialWorkDirRequirement.Builder setListing(java.lang.Object value) {
      validate(fields()[1], value);
      this.listing = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'listing' field has been set.
      * The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.

      * @return True if the 'listing' field has been set, false otherwise.
      */
    public boolean hasListing() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'listing' field.
      * The list of files or subdirectories that must be placed in the
designated output directory prior to executing the command line tool.

May be an expression.  If so, the expression return value must validate
as `{type: array, items: [File, Directory]}`.

      * @return This builder.
      */
    public InitialWorkDirRequirement.Builder clearListing() {
      listing = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public InitialWorkDirRequirement build() {
      try {
        InitialWorkDirRequirement record = new InitialWorkDirRequirement();
        record.class$ = fieldSetFlags()[0] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.listing = fieldSetFlags()[1] ? this.listing : (java.lang.Object) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
