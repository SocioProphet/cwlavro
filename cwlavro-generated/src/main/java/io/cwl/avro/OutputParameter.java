package io.cwl.avro;
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OutputParameter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -108137874215883774L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OutputParameter\",\"fields\":[{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#SchemaBase\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"'Expression' is not a real type.  It indicates that a field must allow\\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\\nis declared and supported by the platform, the field must also allow\\nJavascript expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"]},{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nDescribes files that must be included alongside the primary file(s).\\n\\nIf the value is an expression, the value of `self` in the expression\\nmust be the primary input or output File to which this binding applies.\\n\\nIf the value is a string, it specifies that the following pattern\\nshould be applied to the primary file:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"format\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"},\"Expression\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nFor input parameters, this must be one or more IRIs of concept nodes\\nthat represents file formats which are allowed as input to this\\nparameter, preferrably defined within an ontology.  If no ontology is\\navailable, file formats may be tested by exact match.\\n\\nFor output parameters, this is the file format that will be assigned to\\nthe output parameter.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/cwl#format\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"streamable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only valid when `type: File` or is an array of `items: File`.\\n\\nA value of `true` indicates that the file is read or written\\nsequentially without seeking.  An implementation may use this flag to\\nindicate whether it is valid to stream file contents using a named\\npipe.  Default: `false`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A documentation string for this type, or an array of strings which should be concatenated.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique identifier for this parameter object.\",\"jsonldPredicate\":\"@id\"},{\"name\":\"outputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CommandOutputBinding\",\"doc\":\"Describes how to generate an output parameter based on the files produced\\nby a CommandLineTool.\\n\\nThe output parameter is generated by applying these operations in\\nthe following order:\\n\\n  - glob\\n  - loadContents\\n  - outputEval\\n\",\"fields\":[{\"name\":\"glob\",\"type\":[\"null\",\"string\",\"Expression\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Find files relative to the output directory, using POSIX glob(3)\\npathname matching.  If an array is provided, find files that match any\\npattern in the array.  If an expression is provided, the expression must\\nreturn a string or an array of strings, which will then be evaluated as\\none or more glob patterns.  Must only match and return files which\\nactually exist.\\n\"},{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"For each file matched in `glob`, read up to\\nthe first 64 KiB of text from the file and place it in the `contents`\\nfield of the file object for manipulation by `outputEval`.\\n\",\"jsonldPredicate\":\"cwl:loadContents\"},{\"name\":\"outputEval\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Evaluate an expression to generate the output value.  If `glob` was\\nspecified, the value of `self` must be an array containing file objects\\nthat were matched.  If no files were matched, `self` must be a zero\\nlength array; if a single file was matched, the value of `self` is an\\narray of a single element.  Additionally, if `loadContents` is `true`,\\nthe File objects must include up to the first 64 KiB of file contents\\nin the `contents` field.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#OutputBinding\"}],\"doc\":\"Describes how to handle the outputs of a process.\\n\",\"jsonldPredicate\":\"cwl:outputBinding\"}],\"extends\":\"https://w3id.org/cwl/cwl#Parameter\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A short, human-readable label of this object. */
  @Deprecated public java.lang.CharSequence label;
  /** Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
 */
  @Deprecated public java.lang.Object secondaryFiles;
  /** Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.
 */
  @Deprecated public java.lang.Object format;
  /** Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.
 */
  @Deprecated public java.lang.Boolean streamable;
  /** A documentation string for this type, or an array of strings which should be concatenated. */
  @Deprecated public java.lang.Object doc;
  /** The unique identifier for this parameter object. */
  @Deprecated public java.lang.CharSequence id;
  /** Describes how to handle the outputs of a process.
 */
  @Deprecated public CommandOutputBinding outputBinding;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OutputParameter() {}

  /**
   * All-args constructor.
   * @param label A short, human-readable label of this object.
   * @param secondaryFiles Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   * @param format Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.

   * @param streamable Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   * @param doc A documentation string for this type, or an array of strings which should be concatenated.
   * @param id The unique identifier for this parameter object.
   * @param outputBinding Describes how to handle the outputs of a process.

   */
  public OutputParameter(java.lang.CharSequence label, java.lang.Object secondaryFiles, java.lang.Object format, java.lang.Boolean streamable, java.lang.Object doc, java.lang.CharSequence id, CommandOutputBinding outputBinding) {
    this.label = label;
    this.secondaryFiles = secondaryFiles;
    this.format = format;
    this.streamable = streamable;
    this.doc = doc;
    this.id = id;
    this.outputBinding = outputBinding;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return label;
    case 1: return secondaryFiles;
    case 2: return format;
    case 3: return streamable;
    case 4: return doc;
    case 5: return id;
    case 6: return outputBinding;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: label = (java.lang.CharSequence)value$; break;
    case 1: secondaryFiles = (java.lang.Object)value$; break;
    case 2: format = (java.lang.Object)value$; break;
    case 3: streamable = (java.lang.Boolean)value$; break;
    case 4: doc = (java.lang.Object)value$; break;
    case 5: id = (java.lang.CharSequence)value$; break;
    case 6: outputBinding = (CommandOutputBinding)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'label' field.
   * @return A short, human-readable label of this object.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * A short, human-readable label of this object.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'secondaryFiles' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   */
  public java.lang.Object getSecondaryFiles() {
    return secondaryFiles;
  }

  /**
   * Sets the value of the 'secondaryFiles' field.
   * Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

   * @param value the value to set.
   */
  public void setSecondaryFiles(java.lang.Object value) {
    this.secondaryFiles = value;
  }

  /**
   * Gets the value of the 'format' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.

   */
  public java.lang.Object getFormat() {
    return format;
  }

  /**
   * Sets the value of the 'format' field.
   * Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.

   * @param value the value to set.
   */
  public void setFormat(java.lang.Object value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'streamable' field.
   * @return Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   */
  public java.lang.Boolean getStreamable() {
    return streamable;
  }

  /**
   * Sets the value of the 'streamable' field.
   * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

   * @param value the value to set.
   */
  public void setStreamable(java.lang.Boolean value) {
    this.streamable = value;
  }

  /**
   * Gets the value of the 'doc' field.
   * @return A documentation string for this type, or an array of strings which should be concatenated.
   */
  public java.lang.Object getDoc() {
    return doc;
  }

  /**
   * Sets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.
   * @param value the value to set.
   */
  public void setDoc(java.lang.Object value) {
    this.doc = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The unique identifier for this parameter object.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The unique identifier for this parameter object.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'outputBinding' field.
   * @return Describes how to handle the outputs of a process.

   */
  public CommandOutputBinding getOutputBinding() {
    return outputBinding;
  }

  /**
   * Sets the value of the 'outputBinding' field.
   * Describes how to handle the outputs of a process.

   * @param value the value to set.
   */
  public void setOutputBinding(CommandOutputBinding value) {
    this.outputBinding = value;
  }

  /**
   * Creates a new OutputParameter RecordBuilder.
   * @return A new OutputParameter RecordBuilder
   */
  public static OutputParameter.Builder newBuilder() {
    return new OutputParameter.Builder();
  }

  /**
   * Creates a new OutputParameter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OutputParameter RecordBuilder
   */
  public static OutputParameter.Builder newBuilder(OutputParameter.Builder other) {
    return new OutputParameter.Builder(other);
  }

  /**
   * Creates a new OutputParameter RecordBuilder by copying an existing OutputParameter instance.
   * @param other The existing instance to copy.
   * @return A new OutputParameter RecordBuilder
   */
  public static OutputParameter.Builder newBuilder(OutputParameter other) {
    return new OutputParameter.Builder(other);
  }

  /**
   * RecordBuilder for OutputParameter instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OutputParameter>
    implements org.apache.avro.data.RecordBuilder<OutputParameter> {

    /** A short, human-readable label of this object. */
    private java.lang.CharSequence label;
    /** Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
 */
    private java.lang.Object secondaryFiles;
    /** Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.
 */
    private java.lang.Object format;
    /** Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.
 */
    private java.lang.Boolean streamable;
    /** A documentation string for this type, or an array of strings which should be concatenated. */
    private java.lang.Object doc;
    /** The unique identifier for this parameter object. */
    private java.lang.CharSequence id;
    /** Describes how to handle the outputs of a process.
 */
    private CommandOutputBinding outputBinding;
    private CommandOutputBinding.Builder outputBindingBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(OutputParameter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.secondaryFiles)) {
        this.secondaryFiles = data().deepCopy(fields()[1].schema(), other.secondaryFiles);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.format)) {
        this.format = data().deepCopy(fields()[2].schema(), other.format);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamable)) {
        this.streamable = data().deepCopy(fields()[3].schema(), other.streamable);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.doc)) {
        this.doc = data().deepCopy(fields()[4].schema(), other.doc);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.outputBinding)) {
        this.outputBinding = data().deepCopy(fields()[6].schema(), other.outputBinding);
        fieldSetFlags()[6] = true;
      }
      if (other.hasOutputBindingBuilder()) {
        this.outputBindingBuilder = CommandOutputBinding.newBuilder(other.getOutputBindingBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing OutputParameter instance
     * @param other The existing instance to copy.
     */
    private Builder(OutputParameter other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.secondaryFiles)) {
        this.secondaryFiles = data().deepCopy(fields()[1].schema(), other.secondaryFiles);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.format)) {
        this.format = data().deepCopy(fields()[2].schema(), other.format);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamable)) {
        this.streamable = data().deepCopy(fields()[3].schema(), other.streamable);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.doc)) {
        this.doc = data().deepCopy(fields()[4].schema(), other.doc);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.outputBinding)) {
        this.outputBinding = data().deepCopy(fields()[6].schema(), other.outputBinding);
        fieldSetFlags()[6] = true;
      }
      this.outputBindingBuilder = null;
    }

    /**
      * Gets the value of the 'label' field.
      * A short, human-readable label of this object.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * A short, human-readable label of this object.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public OutputParameter.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.label = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * A short, human-readable label of this object.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'label' field.
      * A short, human-readable label of this object.
      * @return This builder.
      */
    public OutputParameter.Builder clearLabel() {
      label = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return The value.
      */
    public java.lang.Object getSecondaryFiles() {
      return secondaryFiles;
    }

    /**
      * Sets the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @param value The value of 'secondaryFiles'.
      * @return This builder.
      */
    public OutputParameter.Builder setSecondaryFiles(java.lang.Object value) {
      validate(fields()[1], value);
      this.secondaryFiles = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'secondaryFiles' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return True if the 'secondaryFiles' field has been set, false otherwise.
      */
    public boolean hasSecondaryFiles() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'secondaryFiles' field.
      * Only valid when `type: File` or is an array of `items: File`.

Describes files that must be included alongside the primary file(s).

If the value is an expression, the value of `self` in the expression
must be the primary input or output File to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.

      * @return This builder.
      */
    public OutputParameter.Builder clearSecondaryFiles() {
      secondaryFiles = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.

      * @return The value.
      */
    public java.lang.Object getFormat() {
      return format;
    }

    /**
      * Sets the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.

      * @param value The value of 'format'.
      * @return This builder.
      */
    public OutputParameter.Builder setFormat(java.lang.Object value) {
      validate(fields()[2], value);
      this.format = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.

      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'format' field.
      * Only valid when `type: File` or is an array of `items: File`.

For input parameters, this must be one or more IRIs of concept nodes
that represents file formats which are allowed as input to this
parameter, preferrably defined within an ontology.  If no ontology is
available, file formats may be tested by exact match.

For output parameters, this is the file format that will be assigned to
the output parameter.

      * @return This builder.
      */
    public OutputParameter.Builder clearFormat() {
      format = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return The value.
      */
    public java.lang.Boolean getStreamable() {
      return streamable;
    }

    /**
      * Sets the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @param value The value of 'streamable'.
      * @return This builder.
      */
    public OutputParameter.Builder setStreamable(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.streamable = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'streamable' field has been set.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return True if the 'streamable' field has been set, false otherwise.
      */
    public boolean hasStreamable() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'streamable' field.
      * Only valid when `type: File` or is an array of `items: File`.

A value of `true` indicates that the file is read or written
sequentially without seeking.  An implementation may use this flag to
indicate whether it is valid to stream file contents using a named
pipe.  Default: `false`.

      * @return This builder.
      */
    public OutputParameter.Builder clearStreamable() {
      streamable = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return The value.
      */
    public java.lang.Object getDoc() {
      return doc;
    }

    /**
      * Sets the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @param value The value of 'doc'.
      * @return This builder.
      */
    public OutputParameter.Builder setDoc(java.lang.Object value) {
      validate(fields()[4], value);
      this.doc = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'doc' field has been set.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return True if the 'doc' field has been set, false otherwise.
      */
    public boolean hasDoc() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'doc' field.
      * A documentation string for this type, or an array of strings which should be concatenated.
      * @return This builder.
      */
    public OutputParameter.Builder clearDoc() {
      doc = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public OutputParameter.Builder setId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The unique identifier for this parameter object.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'id' field.
      * The unique identifier for this parameter object.
      * @return This builder.
      */
    public OutputParameter.Builder clearId() {
      id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'outputBinding' field.
      * Describes how to handle the outputs of a process.

      * @return The value.
      */
    public CommandOutputBinding getOutputBinding() {
      return outputBinding;
    }

    /**
      * Sets the value of the 'outputBinding' field.
      * Describes how to handle the outputs of a process.

      * @param value The value of 'outputBinding'.
      * @return This builder.
      */
    public OutputParameter.Builder setOutputBinding(CommandOutputBinding value) {
      validate(fields()[6], value);
      this.outputBindingBuilder = null;
      this.outputBinding = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'outputBinding' field has been set.
      * Describes how to handle the outputs of a process.

      * @return True if the 'outputBinding' field has been set, false otherwise.
      */
    public boolean hasOutputBinding() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'outputBinding' field and creates one if it doesn't exist yet.
     * Describes how to handle the outputs of a process.

     * @return This builder.
     */
    public CommandOutputBinding.Builder getOutputBindingBuilder() {
      if (outputBindingBuilder == null) {
        if (hasOutputBinding()) {
          setOutputBindingBuilder(CommandOutputBinding.newBuilder(outputBinding));
        } else {
          setOutputBindingBuilder(CommandOutputBinding.newBuilder());
        }
      }
      return outputBindingBuilder;
    }

    /**
     * Sets the Builder instance for the 'outputBinding' field
     * Describes how to handle the outputs of a process.

     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public OutputParameter.Builder setOutputBindingBuilder(CommandOutputBinding.Builder value) {
      clearOutputBinding();
      outputBindingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'outputBinding' field has an active Builder instance
     * Describes how to handle the outputs of a process.

     * @return True if the 'outputBinding' field has an active Builder instance
     */
    public boolean hasOutputBindingBuilder() {
      return outputBindingBuilder != null;
    }

    /**
      * Clears the value of the 'outputBinding' field.
      * Describes how to handle the outputs of a process.

      * @return This builder.
      */
    public OutputParameter.Builder clearOutputBinding() {
      outputBinding = null;
      outputBindingBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public OutputParameter build() {
      try {
        OutputParameter record = new OutputParameter();
        record.label = fieldSetFlags()[0] ? this.label : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.secondaryFiles = fieldSetFlags()[1] ? this.secondaryFiles : (java.lang.Object) defaultValue(fields()[1]);
        record.format = fieldSetFlags()[2] ? this.format : (java.lang.Object) defaultValue(fields()[2]);
        record.streamable = fieldSetFlags()[3] ? this.streamable : (java.lang.Boolean) defaultValue(fields()[3]);
        record.doc = fieldSetFlags()[4] ? this.doc : (java.lang.Object) defaultValue(fields()[4]);
        record.id = fieldSetFlags()[5] ? this.id : (java.lang.CharSequence) defaultValue(fields()[5]);
        if (outputBindingBuilder != null) {
          record.outputBinding = this.outputBindingBuilder.build();
        } else {
          record.outputBinding = fieldSetFlags()[6] ? this.outputBinding : (CommandOutputBinding) defaultValue(fields()[6]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
