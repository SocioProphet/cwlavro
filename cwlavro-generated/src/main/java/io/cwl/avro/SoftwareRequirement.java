package io.cwl.avro;
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** A list of software packages that should be configured in the environment of
the defined process.
 */
@org.apache.avro.specific.AvroGenerated
public class SoftwareRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SoftwareRequirement\",\"doc\":\"A list of software packages that should be configured in the environment of\\nthe defined process.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"Always 'SoftwareRequirement'\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"}},{\"name\":\"packages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SoftwarePackage\",\"fields\":[{\"name\":\"package\",\"type\":\"string\",\"doc\":\"The common name of the software to be configured.\",\"jsonldPredicate\":\"@id\"},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"The (optional) version of the software to configured.\"},{\"name\":\"specs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Must be one or more IRIs identifying resources for installing or\\nenabling the software.  Implementations may provide resolvers which map\\nwell-known software spec IRIs to some configuration action.\\n\\nFor example, an IRI `https://packages.debian.org/jessie/bowtie` could\\nbe resolved with `apt-get install bowtie`.  An IRI\\n`https://anaconda.org/bioconda/bowtie` could be resolved with `conda\\ninstall -c bioconda bowtie`.\\n\\nTools may also provide IRIs to index entries such as\\n[RRID](http://www.identifiers.org/rrid/), such as\\n`http://identifiers.org/rrid/RRID:SCR_005476`\\n\"}]}},\"doc\":\"The list of software to be configured.\",\"jsonldPredicate\":{\"mapSubject\":\"package\",\"mapPredicate\":\"specs\"}}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Always 'SoftwareRequirement' */
  @Deprecated public java.lang.CharSequence class$;
  /** The list of software to be configured. */
  @Deprecated public java.util.List<SoftwarePackage> packages;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SoftwareRequirement() {}

  /**
   * All-args constructor.
   */
  public SoftwareRequirement(java.lang.CharSequence class$, java.util.List<SoftwarePackage> packages) {
    this.class$ = class$;
    this.packages = packages;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return class$;
    case 1: return packages;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: class$ = (java.lang.CharSequence)value$; break;
    case 1: packages = (java.util.List<SoftwarePackage>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'class$' field.
   * Always 'SoftwareRequirement'   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * Always 'SoftwareRequirement'   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'packages' field.
   * The list of software to be configured.   */
  public java.util.List<SoftwarePackage> getPackages() {
    return packages;
  }

  /**
   * Sets the value of the 'packages' field.
   * The list of software to be configured.   * @param value the value to set.
   */
  public void setPackages(java.util.List<SoftwarePackage> value) {
    this.packages = value;
  }

  /** Creates a new SoftwareRequirement RecordBuilder */
  public static SoftwareRequirement.Builder newBuilder() {
    return new SoftwareRequirement.Builder();
  }
  
  /** Creates a new SoftwareRequirement RecordBuilder by copying an existing Builder */
  public static SoftwareRequirement.Builder newBuilder(SoftwareRequirement.Builder other) {
    return new SoftwareRequirement.Builder(other);
  }
  
  /** Creates a new SoftwareRequirement RecordBuilder by copying an existing SoftwareRequirement instance */
  public static SoftwareRequirement.Builder newBuilder(SoftwareRequirement other) {
    return new SoftwareRequirement.Builder(other);
  }
  
  /**
   * RecordBuilder for SoftwareRequirement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SoftwareRequirement>
    implements org.apache.avro.data.RecordBuilder<SoftwareRequirement> {

    private java.lang.CharSequence class$;
    private java.util.List<SoftwarePackage> packages;

    /** Creates a new Builder */
    private Builder() {
      super(SoftwareRequirement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(SoftwareRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.packages)) {
        this.packages = data().deepCopy(fields()[1].schema(), other.packages);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SoftwareRequirement instance */
    private Builder(SoftwareRequirement other) {
            super(SoftwareRequirement.SCHEMA$);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.packages)) {
        this.packages = data().deepCopy(fields()[1].schema(), other.packages);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'class$' field */
    public java.lang.CharSequence getClass$() {
      return class$;
    }
    
    /** Sets the value of the 'class$' field */
    public SoftwareRequirement.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.class$ = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'class$' field has been set */
    public boolean hasClass$() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'class$' field */
    public SoftwareRequirement.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'packages' field */
    public java.util.List<SoftwarePackage> getPackages() {
      return packages;
    }
    
    /** Sets the value of the 'packages' field */
    public SoftwareRequirement.Builder setPackages(java.util.List<SoftwarePackage> value) {
      validate(fields()[1], value);
      this.packages = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'packages' field has been set */
    public boolean hasPackages() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'packages' field */
    public SoftwareRequirement.Builder clearPackages() {
      packages = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SoftwareRequirement build() {
      try {
        SoftwareRequirement record = new SoftwareRequirement();
        record.class$ = fieldSetFlags()[0] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.packages = fieldSetFlags()[1] ? this.packages : (java.util.List<SoftwarePackage>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
